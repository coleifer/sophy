class SophiaError(Exception):
    pass


class Sophia(object):
    def __init__(self, path: str): ...
    def add_database(self, name: str, schema: Schema) -> Database: ...
    def remove_database(self, name: str) -> None: ...
    def __getitem__(self, name: str): ...
    def open(self) -> bool: ...
    def close(self) -> bool: ...
    def transaction(self) -> Transaction: ...

    @property
    def version(self) -> str: ...

    @property
    def version_storage(self) -> str: ...

    @property
    def build(self) -> str: ...

    @property
    def status(self) -> str: ...

    @property
    def errors(self) -> str: ...

    @property
    def error(self) -> str: ...

    @property
    def backup_path(self) -> str: ...

    @backup_path.setter
    def backup_path(self, path: str) -> str: ...

    def backup_run(self): ...

    @property
    def backup_active(self) -> int: ...

    @property
    def backup_last(self) -> int: ...

    @property
    def backup_last_complete(self) -> int: ...

    @property
    def scheduler_threads(self) -> int: ...

    @scheduler_threads.setter
    def scheduler_threads(self, value: int) -> int: ...

    def scheduler_trace(self, thread_id): ...

    @property
    def transaction_online_rw(self) -> int: ...

    @property
    def transaction_online_ro(self) -> int: ...

    @property
    def transaction_commit(self) -> int: ...

    @property
    def transaction_rollback(self) -> int: ...

    @property
    def transaction_conflict(self) -> int: ...

    @property
    def transaction_lock(self) -> int: ...

    @property
    def transaction_latency(self) -> str: ...

    @property
    def transaction_log(self) -> str: ...

    @property
    def transaction_vlsn(self) -> int: ...

    @property
    def transaction_gc(self) -> int: ...

    @property
    def metric_lsn(self) -> int: ...

    @property
    def metric_tsn(self) -> int: ...

    @property
    def metric_nsn(self) -> int: ...

    @property
    def metric_dsn(self) -> int: ...

    @property
    def metric_bsn(self) -> int: ...

    @property
    def metric_lfsn(self) -> int: ...

    @property
    def log_enable(self) -> int: ...

    @log_enable.setter
    def log_enable(self, value: str): ...

    @property
    def log_path(self) -> str: ...

    @log_path.setter
    def log_path(self, value: str): ...

    @property
    def log_sync(self) -> int: ...

    @log_sync.setter
    def log_sync(self, value: int): ...

    @property
    def log_rotate_wm(self) -> int: ...

    @log_rotate_wm.setter
    def log_rotate_wm(self, value: int) -> int: ...

    @property
    def log_rotate_sync(self) -> int: ...

    @log_rotate_sync.setter
    def log_rotate_sync(self, value: int): ...


    def log_rotate(self): ...
    def log_gc(self): ...

    @property
    def log_files(self) -> int: ...


class Transaction(object):
    def begin(self) -> "Transaction": ...
    def commit(self, begin: bool=True): ...
    def rollback(self, begin: bool=True): ...
    def __enter__(self) -> "Transaction": ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...
    def __getitem__(self, database) -> DatabaseTransaction: ...


SCHEMA_STRING = b'string'
SCHEMA_U64 = b'u64'
SCHEMA_U32 = b'u32'
SCHEMA_U16 = b'u16'
SCHEMA_U8 = b'u8'
SCHEMA_U64_REV = b'u64_rev'
SCHEMA_U32_REV = b'u32_rev'
SCHEMA_U16_REV = b'u16_rev'
SCHEMA_U8_REV = b'u8_rev'


class BaseIndex(object):
    def __init__(self, name: str): ...


class BytesIndex(BaseIndex):
    def encode(self, value) -> bytes: ...
    def decode(self, value: bytes): ...


class StringIndex(BaseIndex):
    def encode(self, value) -> str: ...
    def decode(self, value: str): ...


class U64Index(BaseIndex): ...
class U32Index(U64Index): ...
class U16Index(U64Index): ...
class U8Index(U64Index): ...
class U64RevIndex(U64Index): ...
class U32RevIndex(U32Index): ...
class U16RevIndex(U16Index): ...
class U8RevIndex(U8Index): ...
class Document(object): ...

class Schema(object):
    def __init__(self, key_parts=None, value_parts=None): ...
    def add_key(self, index: BaseIndex): ...
    def add_value(self, index: BaseIndex): ...

    @classmethod
    def key_value(cls) -> "Schema": ...


class Database(object):
    def __init__(self, env: Sophia, name: str, schema: Schema): ...
    def set(self, key, value): ...
    def get(self, key, default=None): ...
    def delete(self, key): ...
    def multi_delete(self, *keys): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value): ...
    def __delitem__(self, key): ...
    def __contains__(self, key): ...
    def update(self, _data: dict=None, **kwargs): ...
    def multi_get(self, *keys): ...
    def get_range(self, start=None, stop=None, reverse=False): ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def __iter__(self): ...
    def __len__(self): ...

    def cursor(self, order='>=', key=None, prefix=None,
               keys=True, values=True) -> Cursor: ...

    @property
    def database_name(self) -> str: ...

    @property
    def database_id(self) -> int: ...

    @property
    def database_path(self) -> str: ...

    @property
    def mmap(self) -> int: ...

    @mmap.setter
    def mmap(self, value: int): ...

    @property
    def direct_io(self) -> int: ...

    @direct_io.setter
    def direct_io(self, value: int): ...

    @property
    def sync(self) -> int: ...

    @sync.setter
    def sync(self, value: int): ...

    @property
    def expire(self) -> int: ...

    @expire.setter
    def expire(self, value: int): ...

    @property
    def compression(self) -> str: ...  # lz4, zstd, none

    @property
    def limit_key(self): ...

    @property
    def limit_field(self) -> int: ...

    @limit_field.setter
    def limit_field(self, value: int): ...

    @property
    def index_memory_used(self) -> int: ...

    @property
    def index_size(self) -> int: ...

    @property
    def index_size_uncompressed(self) -> int: ...

    @property
    def index_count(self) -> int: ...

    @property
    def index_count_dup(self) -> int: ...

    @property
    def index_read_disk(self) -> int: ...

    @property
    def index_read_cache(self) -> int: ...

    @property
    def index_node_count(self) -> int: ...

    @property
    def index_page_count(self) -> int: ...

    @property
    def compaction_cache(self) -> int: ...

    @compaction_cache.setter
    def compaction_cache(self, value: int): ...

    @property
    def compaction_checkpoint(self) -> int: ...

    @compaction_checkpoint.setter
    def compaction_checkpoint(self, value: int): ...

    @property
    def compaction_node_size(self) -> int: ...

    @compaction_node_size.setter
    def compaction_node_size(self, value: int): ...

    @property
    def compaction_page_size(self) -> int: ...

    @compaction_page_size.setter
    def compaction_page_size(self, value: int): ...

    @property
    def compaction_page_checksum(self) -> int: ...

    @compaction_page_checksum.setter
    def compaction_page_checksum(self, value: int): ...

    @property
    def compaction_expire_period(self) -> int: ...

    @compaction_expire_period.setter
    def compaction_expire_period(self, value: int): ...

    @property
    def compaction_gc_wm(self) -> int: ...

    @compaction_gc_wm.setter
    def compaction_gc_wm(self, value: int): ...

    @property
    def compaction_gc_period(self) -> int: ...

    @compaction_gc_period.setter
    def compaction_gc_period(self, value: int): ...

    @property
    def stat_documents_used(self) -> int: ...

    @property
    def stat_documents(self) -> int: ...

    @property
    def stat_field(self) -> str: ...

    @property
    def stat_set(self) -> int: ...

    @property
    def stat_set_latency(self) -> str: ...

    @property
    def stat_delete(self) -> int: ...

    @property
    def stat_delete_latency(self) -> str: ...

    @property
    def stat_get(self) -> int: ...

    @property
    def stat_get_latency(self) -> str: ...

    @property
    def stat_get_read_disk(self) -> str: ...

    @property
    def stat_get_read_cache(self) -> str: ...

    @property
    def stat_pread(self) -> int: ...

    @property
    def stat_pread_latency(self) -> str: ...

    @property
    def stat_cursor(self) -> int: ...

    @property
    def stat_cursor_latency(self) -> str: ...

    @property
    def stat_cursor_read_disk(self) -> str: ...

    @property
    def stat_cursor_read_cache(self) -> str: ...

    @property
    def stat_cursor_ops(self) -> str: ...

    @property
    def scheduler_checkpoint(self) -> int: ...

    @property
    def scheduler_gc(self) -> int: ...

    @property
    def scheduler_expire(self) -> int: ...

    @property
    def scheduler_backup(self) -> int: ...


class DatabaseTransaction(Database):
    def __init__(self, db: Database, transaction: Transaction): ...


class Cursor(object):
    def __iter__(self) -> "Cursor": ...
    def __next__(self): ...
